* React
- NodeJS 플랫폼에서 개발 가능
    → SPA ( Single Page Application )
        . 한개의 페이지에서 형태를 변경해가며 모든 페이지를 전담
    → CSR ( Client Side Rendering )
        . 화면 구성을 프론트에서 전담하므로 서버 부하를 줄일 수 있음
    → 서버의 역할이 데이터 관리 및 전송 역할로 한정된다.
        . RESTful 서비스로 구축

↔ JSP / Servlet, Thymleaf
    → MPA ( Multi Page Application )
        . 여러 페이지로 앱을 구성하는 방식
    → SSR ( Server Side Rendering )
        . 화면 구성을 서버가 진행하고 클라이언트에게 전달하는 방식

* 리액트 철학
- 상태가 UI를 만든다.
- UI를 박스 단위로 생각해야 한다.
- 독립적, 고립적, 재사용성
- 컴포넌트를 잘 만드는 것이 중요!

* 프로젝트 시작
- npx create-react-app [project-name]

* 폴더 구조
- node_modules
    . 라이브러리를 보관
- public
    . 정적 파일 보관
- src
    . 코드 작성 공간
- package.json
    . 라이브러리 정보

* Component
- UI를 만들어 반환하는 함수를 Functional component라고 한다.
    . Functional Component : 함수처럼 재사용성을 가질 수 있다 ( 유지보수 비용 절감 )
    . 반환은 JSX 문법으로 이루어 짐
    . 데이터는 useStata를 사용
    . 외부에서 전달 받은 데이터 값은 props로 사용
- 컴포넌트 정의
    . 대문자로 시작 ( Global convention )
- 컴포넌트의 단위
    . 재사용성
        > 반복되는 코드를 작성하지 않고 재사용성이 높은 컴포넌트로 만들어 사용한다.
    . 단일 책임
        > 한 컴포넌트 안에서 너무 많은 기능, UI를 가지고 있다면, 나누어서 컴포넌트를 만들 수 있다.
- 좋은 컴포넌트
    . 다른 컴포넌트들과 연결되어 있지 않고, 독립적이며 재사용성이 높어여 한다.

* React Hooks
- 재사용 가능한 로직, 함수
- 함수들의 값을 재사용하는 것이 아닌 로직의 재사용을 위한 것
- 자주 사용하는 Hooks
     . useState : 상태관리 로직
     . useEffect :  컴포넌트의 생애주기 관리 로직

